OpenXC Retro Gauge
=========================

The Retro Gauge is a mechanical vehicle gauge that outputs data from OpenXC via
serial communication. The purpose of this gauge is to display vehicle data in a
traditional automotive fashion, a gauge! The design intent was to keep the gauge
as open and accessible as possible so that the community could contribute and
benefit from the design. Below is a description of the different aspects of the
project and how the gauge was created.

For more details on the project, visit the [OpenXC
website](http://openxcplatform.com/projects/retro-gauge.html).

For instructions on how to solder your Retro Gauge PCB, checkout [this Instructable](http://www.instructables.com/id/How-to-Solder-Your-OpenXC-Retro-Gauge/)

This repository contains:

**PCB Schematics** - The `schematics` folder contains Eagle schematics for the
gauge.

**Arduino Firmware** - The `firmware` folder contains Arduino source code to run
on the gauge.

**Enclosure 3D Model** - The `enclosure` folder contains STEP files for the 3D
printable gauge housing. The `makerbot_friendly` folder conatins the same STEP
files, but rotated so they will lie flat on the bed - ready to load up onto a
MakerBot and hit "print".

**Android App** - The `android` folder contains an OpenXC Android application
that can send various vehicle measurements to display on the gauge.

## Data Format

The Retro Gauge can receive two types of data packet.

* Color data is delivered with three digits within angle brackets. `<###>`
  Valid values are between 0 and 259.
* Value data is delivered with two digits each of value, and percentage. The
  numbers are separated by a comma, and enclosed in parentheses. `(vv,pp)`

## Operation

After startup, the user has the following options:

* Start Updates/Stop Updates â€“ This switch toggles the updates to the Retro
  Gauge. When off, no information is sent to the gauge.
* Exit - Exits the application. Note that if the user navigates away from this
  activity via the home or back buttons, updates will continue in the
  background. The Exit button ceases all USB communication with the gauge.
* Data Source Selection - The large buttons labeled "Vehicle Speed", "Miles per
  Gallon", and "Steering Wheel Angle" select those data sources for the
  application. When a data source is selected, a hard coded color pallet is
  set. Hard coded bounds are also set for computing a percentage. All this
  happens in the button handlers.
* Color control slider - The user can use this slider to manually change the
  color of the gauge.
* Map Color To Value - If this is checked, the app ignores the slider and
  instead sets the color by the percentage value. Each data source uses a
  different color scheme. Vehicle Speed data sets colors ranging from green at
  zero to red at 80mph. Miles Per Gallon data sweeps through red at zero to
  green at 50 miles per gallon and above. Steering Wheel data sweeps through
  the entire spectrum.
* Manual Data Entry - This is a debugging tool. Text entered in the text box is
  sent to the Retro Gauge when the Send button is tapped.

# License

The Android and firmware source code is available under the BSD open source
license.

The designs in this repository are available under the [Creative Commons
Atribution 3.0 Unported](http://creativecommons.org/licenses/by/3.0/deed.en_US)
license.
